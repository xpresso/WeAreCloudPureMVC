<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flexlib="flexlib.controls.*"
	xmlns:maps="com.google.maps.*"
	width="100%" height="100%">

	<mx:Panel
		width="800" height="550" x="{(width - 800) /2}" y="{(height - 550) / 2 }"
		title="Heatmap - We are cloud">


		<mx:HBox
			width="100%" height="100%"
			paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<mx:VBox
				width="20%" height="100%">
				<mx:HBox
					width="100%">
					<mx:Button
						id="play" label="Play" width="50%" height="24"
						click="_startPlayer()"/>
					<mx:Button
						id="pause" label="Pause" width="50%" height="24"
						click="_stopPlayer()"/>
				</mx:HBox>
				<mx:Button
					id="reset" label="Reset" width="100%" height="24"
					click="_resetPlayer()"/>
				<mx:ComboBox
					id="criteriaListComponent" width="100%"
					close="_criterionChoosen()"/>
				<mx:List
					id="dataListComponent" width="100%" height="100%" selectable="true" editable="false"
					backgroundColor="#D1DFDD"
					click="_criterionValueChoosen()"/>
			</mx:VBox>
			<maps:Map
				id="map" key="file://" width="80%" height="100%" mapevent_mapready="_onMapReady()"/>
		</mx:HBox>


		<mx:ControlBar
			width="100%" height="65">
			<mx:Grid
				width="100%" paddingLeft="20">
				<mx:GridRow
					width="100%" height="20">
	
					<mx:GridItem
						width="180" height="100%" paddingBottom="1">
						<mx:Label
							text="Opacity:" fontWeight="bold"/>
					</mx:GridItem>
	
					<mx:GridItem
						width="180" height="100%" paddingBottom="1">
						<mx:Label
							text="Radius:" fontWeight="bold"/>
					</mx:GridItem>
	
					<mx:GridItem
						width="180" height="100%" paddingBottom="1">
						<mx:Label
							text="Colors:" fontWeight="bold"/>
					</mx:GridItem>
	
				</mx:GridRow>
				<mx:GridRow
					width="100%" height="95%">
	
					<mx:GridItem
						width="180" height="100%" paddingBottom="2">
						<mx:HSlider
							id="opacitySlider"
							minimum="0"
							maximum="1"
							value="0.7"
							width="160"
							liveDragging="true"
							snapInterval="0.01"
							change="_heatmap.alpha = opacitySlider.value;"/>
					</mx:GridItem>
	
					<mx:GridItem
						width="180" height="100%" paddingBottom="2">
						<mx:HSlider
							id="radiusSlider"
							width="160"
							minimum="1"
							maximum="50"
							value="{_heatmap.itemRadius}"
							snapInterval="1"
							liveDragging="true"
							change="_heatmap.itemRadius = radiusSlider.value;"/>
					</mx:GridItem>
	
					<mx:GridItem
						width="180" height="100%" paddingBottom="2">
						<mx:HSlider
							id="intencitySlider"
							allowTrackClick="true"
							allowThumbOverlap="false"
							liveDragging="true"
							showDataTip="true"
							dataTipPlacement="top"
							dataTipOffset="3"
							showTrackHighlight="true"
							thumbCount="2"
							width="160"
							values="[0, 255]"
							minimum="0" maximum="255" snapInterval="1"
							change="_heatmap.intensityValue1 = intencitySlider.values[0];
							        _heatmap.intensityValue2 = intencitySlider.values[1];"/>
					</mx:GridItem>
	
					<mx:GridItem
						width="180" height="100%" paddingTop="0">
						<mx:Button
							width="160" label="Choose a XML file" click="_file.browse(_typeFilter)"/>
					</mx:GridItem>
	
				</mx:GridRow>
			</mx:Grid>
		</mx:ControlBar>


	</mx:Panel>

	<mx:Style>
		.progressBarPopUpStyle
		{
			modalTransparencyBlur: 0;
			modalTransparency: 0.8;
			modalTransparencyColor: haloSilver;
			modalTransparencyDuration: 500;
		}
	</mx:Style>

	<mx:Script>
		<![CDATA[
			// Flex imports.
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;

			import michaelvandaniker.visualization.*; // Heatmap component.
			import hmp.*; // Our extensions.

			import heatmap.view.events.DocEvent; // Event PureMVC.

			// Google Maps controls.
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.ScaleControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.PositionControlOptions;

			// Google Maps events.
			import com.google.maps.MapZoomEvent;

			// Google Maps coordinates.
			import com.google.maps.LatLng;

			// Google Maps Marker manager.
			import markermanager.MarkerManager;


			/**
			 * LOAD_XML_DATA notification. Sent to load datas.
			 */
			public static const LOAD_XML_DATA:String                      = 'loadXMLData';
			/**
			 * EXTRACT_DATA_FROM_XML_FILE notification. Sent to extract datas.
			 */
			public static const EXTRACT_DATA_FROM_XML_FILE:String         = 'extractDataFromXMLFile';
			/**
			 * APPLY_CRITERION notification. Sent to filter the heatmap with new critiria.
			 */
			public static const APPLY_CRITERION:String                     = 'applyCriterion';


			/*
			 * The reference of the XML file.
			 */
			private var _file:FileReference;
			/*
			 * The filter for the file chooser. (It filters files to show only .xml).
			 */
			private var _typeFilter:Array;


			/**
			 * List of points to draw the heatmap.
			 */
			public var pointsList:ArrayCollection = new ArrayCollection();

			/**
			 * The set of criteria:
			 *  - Criteria names
			 *  - Criteria values
			 *  - Points list for each criterion
			 */
			public var criteria:Array = new Array(3);

			/**
			 * The timer to switch through filters (2,5sec).
			 */
			public var timer:Timer = new Timer(2500);

			/**
			 * The progress bar when loading.
			 */
			public var window:ProgressBarPopUp = new ProgressBarPopUp();
			
			/**
			 * The heatmap
			 */
			[Bindable]
			private var _heatmap:HeatMap;

			public function get Heatmap():HeatMap // Dunno why Heatmap works and not heatmap.
			{
				return this._heatmap;
			}
			/*
			 * The heatmap overlay.
			 */
			private var _heatMapOverlay:GHeatMapOverlay;
			/**
			 *  The Marker manager.
			 */
			public var markerManager:MarkerManager;

	/*
	 * The map. ---------------------------------------------------
	 */
			/*
			 * Called when the map's is loaded. Add google's tools like zoom, position.
			 */
			private function _onMapReady():void
			{
				markerManager = new MarkerManager(map, {});
				// Zoom on the map.
				var zoom:ZoomControl = new ZoomControl(new ZoomControlOptions());
				map.addControl(zoom);
//				map.enableScrollWheelZoom(); Cause errors when scrolling to fast.
				map.enableContinuousZoom();
				// Scale on the map.
				var scale:ScaleControl = new ScaleControl();
				map.addControl(scale);
				// Position control on the map.
				var position:PositionControl = new PositionControl(new PositionControlOptions());
				map.addControl(position);
				// Views.
				var mapContr:MapTypeControl = new MapTypeControl();
	 			map.addControl(mapContr);

				// Heatmap.
				_heatmap.transformationFunction = _latLngToPoint;
				_heatmap.weightFunction = _intensityToWeight;
				_heatmap.gradientArray = GradientDictionary.RAINBOW;

				_heatMapOverlay = new GHeatMapOverlay(_heatmap);
				map.addOverlay(_heatMapOverlay);

				// Item radius.
				radiusSlider.value = _heatmap.itemRadius;
				map.addEventListener(MapZoomEvent.ZOOM_CHANGED, function():void
					{
						_heatmap.itemRadius = radiusSlider.value;
					});

				// Initialization of some components, see below.
				_initComponent();
			}

			/*
			 * Tell to the heatmap where to find the coordinates in the data object (which is a heatMapPoint in our case).
			 *
			 * @param {Object} o The data object.
			 */
			private function _latLngToPoint(o:Object):Object
			{
				return map.fromLatLngToViewport((o as HeatmapPoint).latLng as LatLng);
			}
			
			/*
			 * Tell to the heatmap where to find the intensity in the data object (which is a heatMapPoint in our case).
			 *
			 * @param {Object} o The data object.
			 */
			private function _intensityToWeight(o:Object):Object
			{
				return ((o as HeatmapPoint).intensity as Number);
			}

	/*
	 * Initialization of some components. -------------------------
	 */
			/**
			 * Enable interface's buttons. 
			 */
			public function enableButtons():void
			{
				reset.enabled = true;
				criteriaListComponent.enabled = true;
				dataListComponent.enabled = true;
				opacitySlider.enabled = true;
				radiusSlider.enabled = true;
				intencitySlider.enabled = true;
			}

			/**
			 * Disable interface's buttons.
			 */
			public function disableButtons():void
			{
				play.enabled = false;
				pause.enabled = false;
				reset.enabled = false;
				criteriaListComponent.enabled = false;
				dataListComponent.enabled = false;
				opacitySlider.enabled = false;
				radiusSlider.enabled = false;
				intencitySlider.enabled = false;
			}

			/*
			 * Initialize the components.
			 */
			private function _initComponent():void
			{												
				// Disable buttons.
				disableButtons();

				_typeFilter = new FileFilter("Documents (*.xml)", "*.xml") as Array;
				_file = new FileReference();
				_file.addEventListener(Event.SELECT, _selectHandler);
				_file.addEventListener(Event.COMPLETE, _completeHandler);


				timer.addEventListener(TimerEvent.TIMER, function():void
					{
						// Select the following value in the left menu.
						dataListComponent.selectedIndex = (dataListComponent.selectedIndex + 1) %
						                                  (dataListComponent.dataProvider as ArrayCollection).length;

						// We display only the points matching with this value.                         
						Heatmap.dataProvider = criteria[2]
						                               [criteriaListComponent.selectedIndex]
						                               [dataListComponent.selectedItem];

						_updateMarkersListTodisplay();
					});
			}

			/*
			 * Update the markers list to display.
			 */
			 private function _updateMarkersListTodisplay():void
			 {
	 			markerManager.clearMarkers();
				for(var i:int = 0; i < Heatmap.dataProvider.length; i++)
				{
					markerManager.addMarkerAuto(Heatmap.dataProvider[i].marker);
				}
			 }

			/*
			 * Send various events to the mediator.
			 *
			 * @param {String} notificationType The name of the notification.
			 * @param {Object} body The notification body.
			 */
			private function _sendEvent(notificationType:String, body:Object = null):void
			{
				dispatchEvent(new DocEvent(notificationType, body));
			}

			/*
			 * Handle SELECT event.
			 *
			 * @param {Event} event Selected file.
			 */
			private function _selectHandler(event:Event):void
			{
				PopUpManager.addPopUp(window, this, true);
				window.progressBar.label = "Loading file";
				PopUpManager.centerPopUp(window);

				var fileRef:FileReference = event.target as FileReference;
				_sendEvent(LOAD_XML_DATA, _file);
			}

			/*
			 * Handle COMPLETE event.
			 *
			 * @param {Event} event File loaded.
			 */
			private function _completeHandler(event:Event):void
			{
				window.progressBar.label = "Extracting data";
				var fileRef:FileReference = event.target as FileReference;
				_sendEvent(EXTRACT_DATA_FROM_XML_FILE, _file);
			}

	/*
	 * The Player. ------------------------------------------------
	 */
			/*
			 * Start the player. Start button event handler.
			 */
			private function _startPlayer():void
			{
				if(!timer.running)
				{
					criteriaListComponent.enabled = false;
					dataListComponent.selectable = true;
					_updateMarkersListTodisplay();
				}
				timer.start();
			}

			/*
			 * Stop the player. Stop button event handler.
			 */
			private function _stopPlayer():void
			{
				criteriaListComponent.enabled = true;
				dataListComponent.selectable = true;
				timer.reset();
			}

			/*
			 * Reset the player (All the initial points will reappear). Reset button event handler.
			 */
			private function _resetPlayer():void
			{
				_stopPlayer();
				Heatmap.dataProvider = pointsList;
				_updateMarkersListTodisplay();
			}

			/*
			 * Allow to use the automatic mode if a criterion is choosen.
			 *
			 * Fill in the List component (dataListComponent).
			 * Filter the points to display on the heatmap.
			 */
			private function _criterionChoosen():void
			{
				play.enabled=true;	
				pause.enabled=true;

				dataListComponent.dataProvider = criteria[1][criteriaListComponent.selectedIndex] as ArrayCollection;
				dataListComponent.selectedIndex = 0;

				Heatmap.dataProvider = criteria[2]
				                               [criteriaListComponent.selectedIndex]
				                               [dataListComponent.selectedItem];
				_updateMarkersListTodisplay();
			}

			/*
			 * Filter the points to display on the heatmap.
			 */
			private function _criterionValueChoosen():void
			{
				Heatmap.dataProvider = criteria[2]
				                               [criteriaListComponent.selectedIndex]
				                               [dataListComponent.selectedItem];
				_updateMarkersListTodisplay();
			}
		]]>
	</mx:Script>
</mx:Canvas>