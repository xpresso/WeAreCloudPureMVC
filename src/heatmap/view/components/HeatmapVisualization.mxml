<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 	xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:flexlib="flexlib.controls.*" 
			xmlns:maps="com.google.maps.*" 
			width="100%" height="100%" creationComplete="initFileChooser()">
	<mx:Panel width="800" height="550" x="187" y="4" title="Heatmap - We are cloud">
        <mx:HBox width="100%" height="100%">
        	<mx:VBox width="20%" height="100%" x="10">
        		<mx:Button label="Play" width="130" height="24"/>
        		<mx:List id="dataList" width="100%" height="100%" allowMultipleSelection="true" editable="false" backgroundColor="#D1DFDD"/>        		
            </mx:VBox>        	         		
        	<maps:Map id="map" key="file://" width="100%" height="100%" mapevent_mapready="onMapReady(event)"/>       
        </mx:HBox>
        <mx:ControlBar>
            <mx:Spacer width="100%"/>

				<mx:HSlider x="134" y="419"	
			    				id="opacitySlider" 
			    				minimum="0" 
			    				maximum="1" 
			    				value="0.7"	
			    				dataTipPlacement="top" 
			    				tickColor="black" 
					            tickInterval="10" 
					            labels="['0%','100%']" 
					            allowTrackClick="true" 
					            liveDragging="true"
			    				snapInterval="0.01" 
			    				change="this.Heatmap.alpha = opacitySlider.value;"/>
                        <flexlib:HSlider  
                        	id="intencitySlider" 
                            trackHighlightSkin="flexlib.skins.SliderHighlightSkin"
                            allowTrackClick="true" allowThumbOverlap="true" 
                            liveDragging="true" 
                            showDataTip="true"  dataTipPlacement="top"  dataTipOffset="3" 
                            showTrackHighlight="true"
                            thumbCount="2"  width="200" 
                            values="[0, 255]"
                            minimum="0" maximum="255" snapInterval="1"
                            change="this.Heatmap.intensityValue1 = intencitySlider.values[0];
                            		this.Heatmap.intensityValue2 = intencitySlider.values[1];"
                        />


                       		
            <mx:Button x="434" y="419" label="Choose a XML file" click="file.browse(typeFilter)"/>
        </mx:ControlBar>
    </mx:Panel>

	<mx:Script>
		<![CDATA[
			import com.google.maps.overlays.Marker;
		import com.google.maps.LatLng;
		import michaelvandaniker.visualization.*;
		import hmp.*;
		import heatmap.view.events.DocEvent;

		import com.google.maps.controls.MapTypeControl;
		import com.google.maps.controls.ScaleControl;
		import com.google.maps.controls.ZoomControl;
		import com.google.maps.controls.ZoomControlOptions;
		import com.google.maps.controls.PositionControl;
		import com.google.maps.controls.PositionControlOptions;
		import com.google.maps.MapMouseEvent;


		public static const LOAD_XML_DATA:String                      = 'loadXmlData';
		public static const EXTRACT_DATA_FROM_XML_FILE:String         = 'extractDataFromXmlFile';

		private var file:FileReference;
		private var typeFilter:Array;
		
		/**
		 * The heatmap
		 */
		private var heatmap:HeatMap;
		
		/**
		 * The overlay
		 */
		private var heatMapOverlay:GHeatMapOverlay;
		
		
		public function initFileChooser():void
		{
			typeFilter = initializeTypeFilter();
			file = new FileReference();
			initializeListeners(file);
		}

		private function initializeTypeFilter():Array
		{
			var documentFilter:FileFilter = new FileFilter("Documents (*.xml)", "*.xml");
			return new Array(documentFilter);
		}

		/**
		 * Add listeners to the file FileReference.
		 * To add more Listeners, modify this function.
		 */
		private function initializeListeners(dispatcher:IEventDispatcher):void
		{
			dispatcher.addEventListener(Event.SELECT, selectHandler);
			dispatcher.addEventListener(Event.COMPLETE, completeHandler);
		}
		
		/**
		 * Handle select event.
		 */
		private function selectHandler(event:Event):void
		{
			var fileRef:FileReference = event.target as FileReference;
			sendEvent(LOAD_XML_DATA, fileRef);
		}

		/**
		 * Handle select event.
		 */
		private function completeHandler(event:Event):void
		{
			var fileRef:FileReference = event.target as FileReference;
			sendEvent(EXTRACT_DATA_FROM_XML_FILE, fileRef);
		}

		private function sendEvent(notificationType:String, body:Object = null):void
		{
			dispatchEvent(new DocEvent(notificationType, body));
		}

		/**
		 * Called when the map's load is finished
		 * Add google's tools like zoom, position.
		 */
		private function onMapReady(event:Event):void
		{
			// Zoom on the map
			var zoom:ZoomControl;
			// Scale on the map
			var scale:ScaleControl;
			// Position control on the map
			var position:PositionControl;

			var mapContr:MapTypeControl;
			//var mapContrOpt:MapTypeControlOptions;

			// Zoom
			zoom = new ZoomControl(new ZoomControlOptions());
			map.addControl(zoom);
			map.enableScrollWheelZoom();
			map.enableContinuousZoom();

			// Echelle, et l'anglais! :p
			scale = new ScaleControl();
			map.addControl(scale);

			// Fleches
			position = new PositionControl(new PositionControlOptions());
			map.addControl(position);

			// Vue en relief, satellite etc.
 			mapContr = new MapTypeControl();
 			map.addControl(mapContr);

            // Item radius
			//slider.value = heatmap.itemRadius;

			// Add a listener on mouse move.
			this.map.addEventListener(MapMouseEvent.MOUSE_MOVE, onMouseMove);
			
			/* Heatmap */
			this.heatmap = new HeatMap();
			this.heatmap.transformationFunction = latLonToPoint;
			this.heatmap.weightFunction = intensityToWeight;
			this.heatmap.gradientArray = GradientDictionary.RAINBOW;			
			
			this.heatMapOverlay = new GHeatMapOverlay(this.heatmap);
			this.map.addOverlay(this.heatMapOverlay);
		}
		
		public function get Heatmap():HeatMap
		{
			return this.heatmap;
		}
		private function latLonToPoint(o:Object):Object
		{
			return map.fromLatLngToViewport((o as HeatmapPoint).latLng as LatLng);
		}

		private function intensityToWeight(o:Object):Object
		{
			return ((o as HeatmapPoint).intensity as Number);
		}

		/**
		 * Handle MOUSE_MOVE event.
		 */
		private function onMouseMove(event:MapMouseEvent):void
		{
			if (Heatmap.dataProvider != null)
			{
				for(var i:int = 0; i < Heatmap.dataProvider.length; i++)
				{
					var marker:Marker = heatmap.dataProvider[i].marker;
					if (event.latLng.distanceFrom(marker.getLatLng()) < map.getLatLngBounds().getNorthWest().distanceFrom(map.getLatLngBounds().getSouthEast())*0.05)
					{
						marker.visible = true;
					}
					else
					{
						marker.visible = false;
					}
				}
			}
		}

		]]>
	</mx:Script>
</mx:Canvas>