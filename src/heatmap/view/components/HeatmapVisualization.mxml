<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 	xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:flexlib="flexlib.controls.*" 
			xmlns:maps="com.google.maps.*" 
			width="100%" height="100%" creationComplete="initFileChooser()">
	<mx:Panel width="800" height="550" x="{(width - 800) /2}" y="{(height - 550) / 2 }" title="Heatmap - We are cloud">
       <mx:HBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
        	<mx:VBox width="20%" height="100%" x="10">
        		<mx:HBox width="100%">
	        		<mx:Button label="Play" width="50%" height="24" click="startPlayer()"/>
	        		<mx:Button label="Pause" width="50%" height="24" click="stopPlayer()"/>
        		</mx:HBox>
        		<mx:Button label="Reset" width="100%" height="24" 
        				   click="{timer.stop(); this.Heatmap.dataProvider = this.pointsList;}"
        		/>
        		<mx:ComboBox id="criteriaListComponent" width="100%" 
        					 close="{dataListComponent.dataProvider = criteria[1][criteriaListComponent.selectedIndex] as ArrayCollection; 
        					 		dataListComponent.selectedIndex = 0;}"
        		/>
        		<mx:List id="dataListComponent" 
        			     width="100%" height="100%" selectable="true" editable="false" backgroundColor="#D1DFDD"/>        		
            </mx:VBox>        	         		
        	<maps:Map id="map" key="file://" width="100%" height="100%" mapevent_mapready="onMapReady(event)"/>       
        </mx:HBox>
        <mx:ControlBar width="100%" height="65">
       	<mx:Grid width="100%" paddingLeft="20">
	       	<mx:GridRow width="100%" height="20">
	       		<mx:GridItem width="180" height="100%" paddingBottom="1">
	       			<mx:Label  text="Opacity:" fontWeight="bold"/>
	       		</mx:GridItem>
	       		<mx:GridItem width="180" height="100%" paddingBottom="1">
	       			<mx:Label  text="Radius:" fontWeight="bold"/>
	       		</mx:GridItem>
	       		<mx:GridItem width="180" height="100%" paddingBottom="1">
	       			<mx:Label  text="Colors:" fontWeight="bold"/>
	       		</mx:GridItem>
	       		<mx:GridItem width="180" height="100%" paddingBottom="1">
	       		</mx:GridItem>
	       	</mx:GridRow>
       	 	<mx:GridRow width="100%" height="95%">      	 		
       	 		<mx:GridItem width="180" height="100%" paddingBottom="2">
       	 			<mx:HSlider	
       	 			id="opacitySlider"
       	 			minimum="0" 
       	 			maximum="1" 
       	 			value="0.7"	
       	 			width="160"
       	 		
       	 			liveDragging="true"
       	 			snapInterval="0.01" 
       	 			change="this.Heatmap.alpha = opacitySlider.value;"
       	 			/>
       	 		</mx:GridItem>
       	 		<mx:GridItem width="180" height="100%" paddingBottom="2">
       	 			<mx:HSlider	
       	 			id="radiusSlider" 
       	 			width="160"
       	 			minimum="1" 
       	 			maximum="50" 
       	 			value="{heatmap.itemRadius}"	
       	 			snapInterval="1" 
       	 			liveDragging="true" 
       	 			change="heatmap.itemRadius = radiusSlider.value;"
       	 			/>
       	 		</mx:GridItem>
       	 		<mx:GridItem width="180" height="100%" paddingBottom="2">
       	 			<mx:HSlider  
       	 				id="intencitySlider"
       	 			    allowTrackClick="true" 
       	 			    allowThumbOverlap="false" 
       	 			    liveDragging="true" 
       	 			    showDataTip="true"  
       	 			    dataTipPlacement="top"  
       	 			    dataTipOffset="3" 
       	 			    showTrackHighlight="true"
       	 			    thumbCount="2"  
       	 			    width="160" 
       	 			    values="[0, 255]"
       	 			    minimum="0" maximum="255" snapInterval="1"
       	 			    change="this.Heatmap.intensityValue1 = intencitySlider.values[0];
       	 			    		this.Heatmap.intensityValue2 = intencitySlider.values[1];"
       	 			/>
       	 		</mx:GridItem>
       	 		<mx:GridItem width="180" height="100%" paddingTop="0">
       	 			<mx:Button label="Choose a XML file" click="file.browse(typeFilter)" width="160" />
       	 		</mx:GridItem>
       	 	</mx:GridRow>
       	 </mx:Grid>
       	
        </mx:ControlBar>
    </mx:Panel>
    
    <mx:Style>
    	global 
    	{
            modalTransparencyBlur: 0;
            modalTransparency: 0.8;
            modalTransparencyColor: haloSilver;
            modalTransparencyDuration: 500;
        }
    </mx:Style>


	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import com.google.maps.overlays.Marker;
			import com.google.maps.LatLng;
			import michaelvandaniker.visualization.*;
			import hmp.*;
			import heatmap.view.events.DocEvent;
	
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.ScaleControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.PositionControlOptions;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapZoomEvent;
	
	
			public static const LOAD_XML_DATA:String                      = 'loadXmlData';
			public static const EXTRACT_DATA_FROM_XML_FILE:String         = 'extractDataFromXmlFile';
			public static const APPLY_CRITERIA:String                     = 'applyCriteria';
	
			private var file:FileReference;
			private var typeFilter:Array;
			
			public var pointsList:ArrayCollection = new ArrayCollection();
			public var criteria:Array = new Array(3);
			public var timer:Timer = new Timer(2500);
			
			/**
			 * The heatmap
			 */
			private var heatmap:HeatMap;
			
			/**
			 * The overlay
			 */
			private var heatMapOverlay:GHeatMapOverlay;
			
			
			private function initFileChooser():void
			{
				typeFilter = new FileFilter("Documents (*.xml)", "*.xml") as Array;
				file = new FileReference();
				
				file.addEventListener(Event.SELECT, selectHandler);
				file.addEventListener(Event.COMPLETE, completeHandler);
			}
			
			/**
			 * Handle select event.
			 */
			private function selectHandler(event:Event):void
			{
				var fileRef:FileReference = event.target as FileReference;
				sendEvent(LOAD_XML_DATA, file);
			}
	
			/**
			 * Handle select event.
			 */
			private function completeHandler(event:Event):void
			{
				var fileRef:FileReference = event.target as FileReference;
				sendEvent(EXTRACT_DATA_FROM_XML_FILE, file);
			}
			
			private function startPlayer():void
			{			
				timer.addEventListener(TimerEvent.TIMER,function():void
				{
					dataListComponent.selectedIndex = (dataListComponent.selectedIndex + 1) % (dataListComponent.dataProvider as ArrayCollection).length;
					Heatmap.dataProvider = criteria[2][criteriaListComponent.selectedIndex][dataListComponent.selectedItem];
				});		
				timer.start();
			}
	
			private function stopPlayer():void
			{
				timer.stop();
			}
			
			private function sendEvent(notificationType:String, body:Object = null):void
			{
				dispatchEvent(new DocEvent(notificationType, body));
			}
	
			/**
			 * Called when the map's load is finished
			 * Add google's tools like zoom, position.
			 */
			private function onMapReady(event:Event):void
			{
				// Zoom on the map
				var zoom:ZoomControl;
				// Scale on the map
				var scale:ScaleControl;
				// Position control on the map
				var position:PositionControl;
	
				var mapContr:MapTypeControl;
				//var mapContrOpt:MapTypeControlOptions;
	
				// Zoom
				zoom = new ZoomControl(new ZoomControlOptions());
				map.addControl(zoom);
				map.enableScrollWheelZoom();
				map.enableContinuousZoom();
	
				// Echelle, et l'anglais! :p
				scale = new ScaleControl();
				map.addControl(scale);
	
				// Fleches
				position = new PositionControl(new PositionControlOptions());
				map.addControl(position);
	
				// Vue en relief, satellite etc.
	 			mapContr = new MapTypeControl();
	 			map.addControl(mapContr);
	
	            
	
				// Add a listener on mouse move.
				this.map.addEventListener(MapMouseEvent.MOUSE_MOVE, onMouseMove);
				this.map.addEventListener(MapZoomEvent.ZOOM_CHANGED, onZoomEvent);
				
				/* Heatmap */
				this.heatmap = new HeatMap();
				this.heatmap.transformationFunction = latLonToPoint;
				this.heatmap.weightFunction = intensityToWeight;
				this.heatmap.gradientArray = GradientDictionary.RAINBOW;			
				
				this.heatMapOverlay = new GHeatMapOverlay(this.heatmap);
				this.map.addOverlay(this.heatMapOverlay);
				
				// Item radius
				radiusSlider.value = heatmap.itemRadius;
			}
			
			public function get Heatmap():HeatMap
			{
				return this.heatmap;
			}
			private function latLonToPoint(o:Object):Object
			{
				return map.fromLatLngToViewport((o as HeatmapPoint).latLng as LatLng);
			}
	
			private function intensityToWeight(o:Object):Object
			{
				return ((o as HeatmapPoint).intensity as Number);
			}
	
	
	
			private function onZoomEvent(event:MapZoomEvent):void
			{
				heatmap.itemRadius = radiusSlider.value;
			}
	
			/**
			 * Handle MOUSE_MOVE event.
			 */
			private function onMouseMove(event:MapMouseEvent):void
			{
				if (Heatmap.dataProvider != null)
				{
					for(var i:int = 0; i < Heatmap.dataProvider.length; i++)
					{
						var marker:Marker = heatmap.dataProvider[i].marker;
						if (event.latLng.distanceFrom(marker.getLatLng()) < map.getLatLngBounds().getNorthWest().distanceFrom(map.getLatLngBounds().getSouthEast())*0.05)
						{
							marker.visible = true;
						}
						else
						{
							marker.visible = false;
						}
					}
				}
			}

		]]>
	</mx:Script>
</mx:Canvas>